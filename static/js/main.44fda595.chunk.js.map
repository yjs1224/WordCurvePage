{"version":3,"sources":["ngnlab.png","getData.js","wordSelectBar.js","wordCurve.js","logo.js","searchButton.js","main.js","serviceWorker.js","index.js"],"names":["module","exports","serverURL","wrapUrl","url","trueURL","startsWith","Date","getTime","getData","callback","data","reqwest","type","method","contentType","success","Option","WordSelectBar","props","state","candidates","fetching","words","fetchCandidateWord","query","setState","getCandidate","length","message","info","handleChange","updateCurve","debounce","this","mode","value","placeholder","notFoundContent","size","filterOption","onSearch","onChange","style","width","map","d","key","Component","WordCurve","getOption","values","years","Object","keys","series","name","smooth","showSymbol","itemStyle","emphasis","borderWidth","tooltip","trigger","axisPointer","label","show","formatter","params","seriesData","window","mouseCurValue","res","minDistance","minDistanceIndex","i","distance","Number","axisValue","marker","seriesName","title","text","join","xAxis","boundarygap","yAxis","legend","toolbox","orient","feature","dataZoom","yAxisIndex","saveAsImage","option","height","marginLeft","defaultProps","Logo","verticalAlign","textAlign","href","display","src","logoUrl","alt","paddingBottom","fontFamily","fontSize","color","SearchButton","startyear","lastyear","smoothyears","handleStartYearChange","handleLastYearChange","handleSmoothYearsChange","parseInt","handleClick","event","updateOption","handleStartYearChangeBetter","handleLastYearChangeBetter","handleSmoothYearsChangeBetter","min","max","defaultValue","onPressEnter","disabled","onClick","Main","curveoptions","getCurve","options","console","log","eleLink","document","createElement","download","tmp","blob","Blob","URL","createObjectURL","body","appendChild","click","removeChild","newvalues","newyears","startIndex","endIndex","step","newdata","j","bind","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yFAAAA,EAAOC,QAAU,IAA0B,oC,uQCErCC,EAAY,2BAGlB,SAASC,EAAQC,GACb,IAAIC,EAMJ,OAJIA,EADAD,EAAIE,WAAW,OAASF,EAAIE,WAAW,QAC7BF,EAEAF,EAAYE,EAC1BC,GAAW,UAAY,IAAIE,MAAOC,UAItC,SAASC,EAAQL,EAAKM,GAAsB,IAAZC,EAAW,uDAAJ,GACnCC,IAAQ,CACJR,IAAKD,EAAQC,GACbS,KAAM,OACNC,OAAQ,MACRH,KAAMA,EACNI,YAAa,mBACbC,QAASN,I,ICjBVO,E,IAAAA,OAEMC,EAAb,YACI,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAIVC,MAAQ,CACJC,WAAY,GACZC,UAAU,EACVC,MAAO,IARQ,EAUnBC,mBAAqB,SAAAC,GAGjB,EAAKC,SAAS,CAACL,WAAY,GAAIC,UAAU,IDS1C,SAAsBG,EAAOf,GAChCD,EAAQ,gBAAiBC,EAAU,CAACe,MAAOA,ICTvCE,CAAaF,GAAO,SAACJ,GACjB,EAAKK,SAAS,CAACL,aAAYC,UAAU,IACZ,IAAtBD,EAAWO,QACdC,EAAA,EAAQC,KAAK,oBAjBF,EAuBnBC,aAAe,SAAAR,GACX,EAAKG,SAAS,CACVL,WAAY,GACZC,UAAU,EACVC,MAAOA,IAEX,EAAKJ,MAAMa,YAAYT,IA3BvB,EAAKC,mBAAqBS,IAAS,EAAKT,mBAAoB,KAF7C,EADvB,sEAiCc,IAAD,EACiCU,KAAKd,MAApCE,EADF,EACEA,SAAUD,EADZ,EACYA,WAAYE,EADxB,EACwBA,MAC7B,OACI,uBACIY,KAAK,WACLC,MAAOb,EACPc,YAAY,oCACZC,gBAAiBhB,EAAW,uBAAMiB,KAAK,UAAY,KACnDC,cAAc,EACdC,SAAUP,KAAKV,mBACfkB,SAAUR,KAAKH,aACfY,MAAO,CAACC,MAAO,SAEdvB,EAAWwB,KAAI,SAAAC,GAAC,OACb,kBAAC7B,EAAD,CAAQ8B,IAAKD,GAAIA,WA/CrC,GAAmCE,a,kBCJtBC,EAAb,2MACIC,UAAY,SAACC,EAAQC,GACjB,IAAM7B,EAAQ8B,OAAOC,KAAKH,GACpBI,EAAShC,EAAMsB,KAAI,SAAAE,GACrB,MAAO,CACHpC,KAAMwC,EAAOJ,GACblC,KAAM,OACN2C,KAAMT,EACNU,QAAQ,EACRC,YAAW,EACXC,UAAU,CACNC,SAAS,CACLC,YAAY,SAK5B,MAAO,CACHC,QAAQ,CACJC,QAAQ,OACRC,YAAa,CACTnD,KAAM,QACNoD,MAAO,CACHC,MAAK,EACLC,UAAW,SAAUC,GACgB,IAA7BA,EAAOC,WAAWzC,SAClB0C,OAAOC,cAAgBH,EAAOhC,UAK9C+B,UAAW,SAAUC,GAWjB,IAVA,IAAII,EAAM,GASNC,EAAc,IAAIC,EAAiB,EAC/BC,EAAG,EAAEA,EAAEP,EAAOxC,OAAO+C,IAAI,CAC7B,IAAIpB,EAASa,EAAOO,GAChBC,EAAYC,OAAOtB,EAAO5C,MAAM2D,OAAOC,cAAe,EAAGM,OAAOtB,EAAO5C,MAAM2D,OAAOC,cAAgBD,OAAOC,cAAcM,OAAOtB,EAAO5C,MACxI8D,EAAYG,IACXH,EAAcG,EACdF,EAAmBC,GAG3B,IAAIpB,EAASa,EAAOM,GAEpB,GADAF,EAAMjB,EAAOuB,UAAY,QAAUvB,EAAOwB,OAASxB,EAAOyB,WAAa,IAAMzB,EAAO5C,KAAO,QACxF8D,EAAY,GAAI,CACfD,EAAM,GACNA,GAAOJ,EAAO,GAAGU,UACjB,IAAI,IAAIH,EAAI,EAAEA,EAAEP,EAAOxC,OAAO+C,IAAI,CAC9B,IAAIpB,EAASa,EAAOO,GACpBH,GAAQ,QAAUjB,EAAOwB,OAASxB,EAAOyB,WAAa,IAAMzB,EAAO5C,MAG3E,OAAO6D,IAGfS,MAAO,CACHC,KAAM,YAAc3D,EAAM4D,KAAK,OAEnCC,MAAO,CACHvE,KAAM,WACNF,KAAMyC,EACNI,KAAM,OACN6B,aAAY,GAEhBC,MAAO,CACHzE,KAAM,QACN2C,KAAM,cAEV+B,OAAQ,CACJ5E,KAAMY,GAEVgC,OAAQA,EACRiC,QAAS,CAELC,OAAO,WACPC,QAAS,CACLC,SAAU,CACNC,WAAY,QAGhBC,YAAa,KAGrBF,SAAU,CAAC,CACPzB,MAAK,GACP,CACErD,KAAM,aA9FtB,wEAqGQ,OACI,kBAAC,IAAD,CAAckC,IAAKM,OAAOC,KAAKpB,KAAKf,MAAMgC,QAAQgC,KAAK,KACnDW,OAAQ5D,KAAKgB,UAAUhB,KAAKf,MAAMgC,OAAQjB,KAAKf,MAAMiC,OACrDT,MAAO,CAACoD,OAAQ,QAASnD,MAAO,MAAMoD,WAAW,YAxGjE,GAA+BhD,aA8G/BC,EAAUgD,aAAe,CACrB9C,OAAQ,CACJ,UAAa,CAAC,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,IACtD,UAAa,CAAC,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,KAE1DC,MAAO,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,O,sBCnH/C8C,EAAb,iLAEQ,OACI,yBAAKvD,MAAO,CAACwD,cAAc,SAASvD,MAAM,OAAOwD,UAAU,WAC3D,uBAAGC,KAAK,oBAAoB1D,MAAO,CAAC2D,QAAQ,iBACxC,yBAAKC,IAAKC,IAAUC,IAAI,OAAO9D,MAAO,CAACwD,cAAc,SAASJ,OAAO,OAAOW,cAAc,OAAO9D,MAAM,WAF3G,uBAOA,yBAAKD,MAAO,CAACgE,WAAW,UAAWC,SAAS,OAAOC,MAAM,UAAUP,QAAQ,iBAA3E,mBAVZ,GAA0BtD,a,oCCAlB/B,E,IAAAA,OAMK6F,EAAb,2MAII1F,MAAQ,CACJ2F,UAAW,KACXC,SAAU,KACVC,YAAa,GAPrB,EASIC,sBAAwB,SAAA9E,GACpB,EAAKV,SAAS,CACVqF,UAAU3E,KAXtB,EAeI+E,qBAAuB,SAAA/E,GACnB,EAAKV,SAAS,CACVsF,SAAS5E,KAjBrB,EAqBIgF,wBAA0B,SAAAhF,GACtB,EAAKV,SAAS,CACVuF,YAAaI,SAASjF,MAvBlC,EA4BIkF,YAAc,SAAAC,GAGV,EAAKpG,MAAMqG,aAAa,CAAC,EAAKpG,MAAM2F,UAAU,EAAK3F,MAAM4F,SAAS,EAAK5F,MAAM6F,eA/BrF,EAkCIQ,4BAA8B,SAAAF,GAC1B,EAAKL,sBAAsBK,GAC3B,EAAKD,eApCb,EAuCII,2BAA6B,SAAAH,GACzB,EAAKJ,qBAAqBI,GAC1B,EAAKD,eAzCb,EA4CIK,8BAAgC,SAAAJ,GAC5B,EAAKH,0BACL,EAAKE,eA9Cb,wEAiDQ,OACI,yBAAK3E,MAAO,CAACqD,WAAW,QAAxB,WAEG,uBAAa4B,IAAK,KAAMC,IAAK,KAAMC,aAAc,KAAMpF,SAAUR,KAAKgF,sBAAuBa,aAAc7F,KAAKoF,cAFnH,aAIG,uBAAaM,IAAK,KAAMC,IAAK,KAAMC,aAAc,KAAMpF,SAAUR,KAAKiF,qBAAsBY,aAAc7F,KAAKoF,cAJlH,4BAOG,uBAAQQ,aAAa,IAAInF,MAAO,CAAEC,MAAO,IAAMF,SAAUR,KAAKkF,wBAAyBW,aAAc7F,KAAKoF,YAAaU,UAAQ,GAC1H,kBAAC,EAAD,CAAQ5F,MAAM,KAAd,KACA,kBAAC,EAAD,CAAQA,MAAM,KAAd,KACA,kBAAC,EAAD,CAAQA,MAAM,KAAd,KACA,kBAAC,EAAD,CAAQA,MAAM,KAAd,KACA,kBAAC,EAAD,CAAQA,MAAM,KAAd,KAKA,kBAAC,EAAD,CAAQA,MAAM,MAAd,OAjBR,uBAsBI,uBAAQvB,KAAK,UAAWoH,QAAS/F,KAAKoF,aAAtC,wBAtBJ,uBA0BI,uBAAQW,QAAS/F,KAAKf,MAAMmG,aAA5B,sBA5EhB,GAAkCtE,aCSrBkF,EAAb,2MACI9G,MAAQ,CACJ+B,OAAQ,GACRC,MAAO,GACP+E,aAAa,CAAC,KAAK,KAAK,IAJhC,EAOInG,YAAc,SAACT,ILCZ,SAAkBA,EAAOb,GAC5BD,EAAQ,YAAaC,EAAU,CAACa,MAAOA,IKDnC6G,CAAS7G,GAAO,SAACiD,GACb,EAAK9C,SAAS,CAACyB,OAAQqB,EAAIrB,QAAU,GAAIC,MAAOoB,EAAIpB,OAAS,SATzE,EAaIoE,aAAe,SAACa,GACZ,EAAK3G,SAAS,CAACyG,aAAcE,IAC7BC,QAAQC,IAAIF,EAAQ,EAAKjH,MAAM+G,eAfvC,6EA2BI,IAAIK,EAAUC,SAASC,cAAc,KACrCF,EAAQG,SAAW,sBACnBH,EAAQ7F,MAAM2D,QAAU,OAKxB,IAHA,IAAM/E,EAAQ8B,OAAOC,KAAKpB,KAAKd,MAAM+B,QACjCyF,EAAM,GACNjE,EAAI,EACFA,EAAEpD,EAAMK,OAAO+C,IACjBiE,EAAI,EAAEjE,GAAKpD,EAAMoD,GAAG,KACpBiE,EAAI,EAAEjE,EAAE,GAAKzC,KAAKd,MAAM+B,OAAO5B,EAAMoD,IAAI,KAE7CiE,EAAiB,EAAbrH,EAAMK,QAAY,UAAYM,KAAKd,MAAMgC,MAE7C,IAAIyF,EAAO,IAAIC,KAAKF,GACpBJ,EAAQnC,KAAO0C,IAAIC,gBAAgBH,GAEnCJ,SAASQ,KAAKC,YAAYV,GAC1BA,EAAQW,QAERV,SAASQ,KAAKG,YAAYZ,KA9C9B,+BA0DQ,IATM,IAAD,EACiBtG,KAAKd,MAAtB+B,EADA,EACAA,OAAQC,EADR,EACQA,MACT7B,EAAQ8B,OAAOC,KAAKH,GACpBkG,EAAW,GACXC,EAAW,GACXC,EAAarH,KAAKd,MAAM+G,aAAa,GAAG,KACxCqB,EAAWtH,KAAKd,MAAM+G,aAAa,GAAG,KAAK,KAAK,KAChDsB,EAAOvH,KAAKd,MAAM+G,aAAa,GAC/BxD,EAAI,EACFA,EAAEpD,EAAMK,OAAO+C,IAAI,CACrB,IAAI+E,EAAU,GACVC,EAAI,EACR,IAAIA,EAAEJ,EAAWI,GAAGH,EAASG,GAAGF,EAC5BC,GAASC,EAAEJ,GAAYE,GAAQtG,EAAO5B,EAAMoD,IAAIgF,GAEpDN,EAAU9H,EAAMoD,IAAM+E,EAE1B,IAAIC,EAAG,EACP,IAAIA,EAAIJ,EAAWI,GAAGH,EAASG,GAAGF,EAC9BH,GAAUK,EAAEJ,GAAYE,GAAQrG,EAAMuG,GAQ1C,OANmB,IAAhBpI,EAAMK,SACLuB,EAASkG,EACTjG,EAAQkG,GAKR,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAetH,YAAaE,KAAKF,YAAY4H,KAAK1H,QAClD,kBAAC,EAAD,CAAcsF,aAActF,KAAKsF,aAAaoC,KAAK1H,MAAOoF,YAAapF,KAAKoF,YAAYsC,KAAK1H,OAA7F,KACA,kBAAC,EAAD,CAAWiB,OAAQA,EAAQC,MAAOA,SAjFlD,GAA0BJ,aCNN6G,QACW,cAA7BvF,OAAOwF,SAASC,UAEe,UAA7BzF,OAAOwF,SAASC,UAEhBzF,OAAOwF,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASzB,SAAS0B,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.44fda595.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ngnlab.54d614c6.png\";","import reqwest from 'reqwest';\r\n\r\nconst serverURL = 'https://101.6.69.26:5003'; // same as backend\r\n// const serverURL = 'https://192.168.56.1:5003'; // same as backend\r\n\r\nfunction wrapUrl(url) {\r\n    let trueURL;\r\n    if (url.startsWith('//') || url.startsWith('http'))\r\n        trueURL = url;\r\n    else\r\n        trueURL = serverURL + url;\r\n    trueURL += '?time=' + (new Date().getTime());\r\n    return trueURL;\r\n}\r\n\r\nfunction getData(url, callback, data = {}) {\r\n    reqwest({\r\n        url: wrapUrl(url),\r\n        type: 'json',\r\n        method: 'get',\r\n        data: data,\r\n        contentType: 'application/json',\r\n        success: callback\r\n    });\r\n}\r\n\r\nexport function getCurve(words, callback) {\r\n    getData('/getCurve', callback, {words: words});\r\n}\r\n\r\nexport function getCandidate(query, callback) {\r\n    getData('/getCandidate', callback, {query: query});\r\n}","import React, {Component} from 'react';\r\nimport debounce from 'lodash/debounce';\r\nimport {getCandidate} from \"./getData\";\r\nimport {Select, Spin, message} from 'antd';\r\n\r\nconst {Option} = Select;\r\n\r\nexport class WordSelectBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.fetchCandidateWord = debounce(this.fetchCandidateWord, 800);\r\n    }\r\n\r\n    state = {\r\n        candidates: [],\r\n        fetching: false,\r\n        words: [],\r\n    };\r\n    fetchCandidateWord = query => {\r\n        // this.lastFetchId += 1;\r\n        // const fetchId = this.lastFetchId;\r\n        this.setState({candidates: [], fetching: true});\r\n        getCandidate(query, (candidates) => {\r\n            this.setState({candidates, fetching: false}); \r\n            if(candidates.length === 0){\r\n            message.info(\"No Such Word\");\r\n        }\r\n        });\r\n\r\n    };\r\n\r\n    handleChange = words => {\r\n        this.setState({\r\n            candidates: [],\r\n            fetching: false,\r\n            words: words,\r\n        });\r\n        this.props.updateCurve(words);\r\n    };\r\n\r\n    render() {\r\n        const {fetching, candidates, words} = this.state;\r\n        return (\r\n            <Select\r\n                mode=\"multiple\"\r\n                value={words}\r\n                placeholder=\"Search to select words to display\"\r\n                notFoundContent={fetching ? <Spin size=\"small\"/> : null}\r\n                filterOption={false}\r\n                onSearch={this.fetchCandidateWord}\r\n                onChange={this.handleChange}\r\n                style={{width: '100%'}}\r\n            >\r\n                {candidates.map(d => (\r\n                    <Option key={d}>{d}</Option>\r\n                ))}\r\n            </Select>\r\n        );\r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\nimport ReactEcharts from 'echarts-for-react';\r\n\r\nexport class WordCurve extends Component {\r\n    getOption = (values, years) => {\r\n        const words = Object.keys(values);\r\n        const series = words.map(key => {\r\n            return {\r\n                data: values[key],\r\n                type: 'line',\r\n                name: key,\r\n                smooth: true,\r\n                showSymbol:false,\r\n                itemStyle:{\r\n                    emphasis:{\r\n                        borderWidth:10,\r\n                    },\r\n                },\r\n            }\r\n        });\r\n        return {\r\n            tooltip:{\r\n                trigger:\"axis\",\r\n                axisPointer: {\r\n                    type: \"cross\",\r\n                    label: {\r\n                        show:false,\r\n                        formatter: function (params) {\r\n                            if (params.seriesData.length === 0) {\r\n                                window.mouseCurValue = params.value;\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                formatter: function (params) {\r\n                    let res = \"\";\r\n                    // for (let i = 0; i < params.length; i++) {\r\n                    //     let series = params[i];\r\n                    //     sum += Number(series.data);\r\n                    //     if (sum >= window.mouseCurValue) {\r\n                    //         res = series.axisValue + \"<br/>\" + series.marker + series.seriesName + \":\" + series.data + \"<br/>\";\r\n                    //         break;\r\n                    //     }\r\n                    // }\r\n                    let minDistance = 100,minDistanceIndex=0;\r\n                    for(let i =0;i<params.length;i++){\r\n                        let series = params[i];\r\n                        let distance = (Number(series.data)-window.mouseCurValue)>0?(Number(series.data)-window.mouseCurValue):(window.mouseCurValue-Number(series.data));\r\n                        if(minDistance>distance){\r\n                            minDistance = distance;\r\n                            minDistanceIndex = i;\r\n                        }\r\n                    }\r\n                    let series = params[minDistanceIndex];\r\n                    res = series.axisValue + \"<br/>\" + series.marker + series.seriesName + \":\" + series.data + \"<br/>\";\r\n                    if(minDistance>0.5){\r\n                        res = \"\";\r\n                        res += params[0].axisValue;\r\n                        for(let i = 0;i<params.length;i++){\r\n                            let series = params[i];\r\n                            res +=  \"<br/>\" + series.marker + series.seriesName + \":\" + series.data ;\r\n                        }\r\n                    }\r\n                    return res;\r\n                },\r\n            },\r\n            title: {\r\n                text: 'Curve of ' + words.join(', '),\r\n            },\r\n            xAxis: {\r\n                type: 'category',\r\n                data: years,\r\n                name: 'Year',\r\n                boundarygap:false,\r\n            },\r\n            yAxis: {\r\n                type: 'value',\r\n                name: 'similarity'\r\n            },\r\n            legend: {\r\n                data: words,\r\n            },\r\n            series: series,\r\n            toolbox: {\r\n                // left: '',\r\n                orient:\"vertical\",\r\n                feature: {\r\n                    dataZoom: {\r\n                        yAxisIndex: 'none'\r\n                    },\r\n                    // restore: {},\r\n                    saveAsImage: {}\r\n                }\r\n            },\r\n            dataZoom: [{\r\n                show:true,\r\n            },{\r\n                type: 'inside',\r\n                \r\n            }],\r\n        };\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <ReactEcharts key={Object.keys(this.props.values).join(',')}\r\n                option={this.getOption(this.props.values, this.props.years)}\r\n                style={{height: \"500px\", width: '90%',marginLeft:\"5%\"}}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nWordCurve.defaultProps = {\r\n    values: {\r\n        'testWord1': [0.1, 0.1, 0.2, 0.5, 0.7, 0.6, 0.5, 0.3, 0.3],\r\n        'testWord2': [0.2, 0.3, 0.8, 0.7, 0.5, 0.1, 0.1, 0.1, 0.1],\r\n    },\r\n    years: [2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023]\r\n};","import React, {Component} from 'react';\r\nimport logoUrl from \"./ngnlab.png\"\r\n\r\nexport class Logo extends Component{\r\n    render(){\r\n        return(\r\n            <div style={{verticalAlign:\"middle\",width:\"100%\",textAlign:\"center\"}}>\r\n            <a href=\"http://ngnlab.cn/\" style={{display:\"inline-block\"}}>\r\n                <img src={logoUrl}  alt=\"LOGO\" style={{verticalAlign:\"middle\",height:\"50px\",paddingBottom:\"15px\",width:\"70px\"}}>\r\n                </img>\r\n                {/* <span style={{fontFamily:\"verdana\", fontSize:\"20px\",color:\"#000000\",textAlign:\"center\"}}>NGNLab </span> */}\r\n            </a>\r\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n            <div style={{fontFamily:\"verdana\", fontSize:\"30px\",color:\"#6C59B8\",display:\"inline-block\"}}>Word Curve</div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, {Component} from 'react';\r\n// import {Select} from 'antd';\r\nimport { InputNumber, Select, Button} from 'antd';\r\nconst { Option } = Select;\r\n\r\n// function onChange(value) {\r\n//   console.log('changed', value);\r\n// }\r\n\r\nexport class SearchButton extends Component{\r\n    // constructor(props) {\r\n    //     super(props);\r\n    // }\r\n    state = {\r\n        startyear: 1801,\r\n        lastyear: 2008,\r\n        smoothyears: 1,\r\n    };\r\n    handleStartYearChange = value => {\r\n        this.setState({\r\n            startyear:value,\r\n        });\r\n        // console.log('changed startyear', this.state.startyear);\r\n    };\r\n    handleLastYearChange = value => {\r\n        this.setState({\r\n            lastyear:value,\r\n        });\r\n        // console.log('changed lastyear', this.state.lastyear);\r\n    };\r\n    handleSmoothYearsChange = value => {\r\n        this.setState({\r\n            smoothyears: parseInt(value),\r\n        });\r\n        // console.log('changed smoothyears',this.state.smoothyears);\r\n    };\r\n\r\n    handleClick = event =>{\r\n        //改变曲线的设置\r\n        // console.log('state',this.state.startyear,this.state.lastyear,this.state.smoothyears);\r\n        this.props.updateOption([this.state.startyear,this.state.lastyear,this.state.smoothyears]);\r\n    }\r\n\r\n    handleStartYearChangeBetter = event =>{\r\n        this.handleStartYearChange(event);\r\n        this.handleClick();\r\n    }\r\n\r\n    handleLastYearChangeBetter = event =>{\r\n        this.handleLastYearChange(event);\r\n        this.handleClick();\r\n    }\r\n\r\n    handleSmoothYearsChangeBetter = event =>{\r\n        this.handleSmoothYearsChange();\r\n        this.handleClick();\r\n    }\r\n    render(){\r\n        return(\r\n            <div style={{marginLeft:\"20%\"}}>\r\n               from&nbsp;\r\n               <InputNumber min={1801} max={2008} defaultValue={1801} onChange={this.handleStartYearChange} onPressEnter={this.handleClick}/> \r\n               &nbsp;to&nbsp;\r\n               <InputNumber min={1801} max={2008} defaultValue={2008} onChange={this.handleLastYearChange} onPressEnter={this.handleClick}/>\r\n               &nbsp;with smoothing of&nbsp;\r\n               {/* <InputNumber min={1801} max={2008} defaultValue={2008} onChange={this.handleSmoothYearsChange} /> */}\r\n               <Select defaultValue=\"1\" style={{ width: 80 }} onChange={this.handleSmoothYearsChange} onPressEnter={this.handleClick} disabled>\r\n                    <Option value=\"1\">1</Option>\r\n                    <Option value=\"2\">2</Option>\r\n                    <Option value=\"3\">3</Option>\r\n                    <Option value=\"4\">4</Option>\r\n                    <Option value=\"5\">5</Option>\r\n                    {/* <Option value=\"6\">6</Option>\r\n                    <Option value=\"7\">7</Option>\r\n                    <Option value=\"8\">8</Option>\r\n                    <Option value=\"9\">9</Option> */}\r\n                    <Option value=\"10\">10</Option>\r\n                    {/* <Option value=\"20\">20</Option>\r\n                    <Option value=\"30\">30</Option> */}\r\n                </Select>\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <Button type=\"default\"  onClick={this.handleClick}>\r\n                    search lots of words\r\n                </Button>\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <Button onClick={this.props.handleClick}>\r\n                    Download Data\r\n                </Button>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport {WordSelectBar} from \"./wordSelectBar\";\r\nimport {getCurve} from \"./getData\";\r\nimport {WordCurve} from \"./wordCurve\";\r\nimport {Logo} from \"./logo\";\r\nimport {SearchButton} from \"./searchButton\";\r\n// import {Button} from \"antd\"\r\n \r\n// function Download(props) {\r\n//     return (\r\n//       <button className=\"download\" onClick={props.onClick}\r\n//       style={{backgroundColor:\"#000000\",border:\"0px\",fontFamily:\"verdana\",color:\"#FFFFFF\",fontSize:\"20px\"}}\r\n//       >\r\n//           download data\r\n//       </button>\r\n//     );\r\n//   }\r\n\r\nexport class Main extends Component {\r\n    state = {\r\n        values: {},\r\n        years: [],\r\n        curveoptions:[1801,2008,1],\r\n    };\r\n\r\n    updateCurve = (words) => {\r\n        getCurve(words, (res) => {\r\n            this.setState({values: res.values || {}, years: res.years || []});\r\n        })\r\n    };\r\n\r\n    updateOption = (options) => {\r\n        this.setState({curveoptions: options,})\r\n        console.log(options,this.state.curveoptions);\r\n    }\r\n\r\n    // renderDownload(){\r\n    //     return (\r\n    //         <Download\r\n    //           onClick={() => this.handleClick()}\r\n    //         />\r\n    //       );\r\n    // }\r\n\r\n    handleClick(){\r\n    var eleLink = document.createElement('a');\r\n    eleLink.download = \"curves_of_all_words\" ;\r\n    eleLink.style.display = 'none';\r\n    // 字符内容转变成blob地址\r\n    const words = Object.keys(this.state.values)\r\n    var tmp = [];\r\n    var i = 0;\r\n    for(i;i<words.length;i++){\r\n        tmp[2*i] = words[i]+\": \";\r\n        tmp[2*i+1] = this.state.values[words[i]]+\"\\n\"; \r\n    }\r\n    tmp[words.length*2] = \"years: \" + this.state.years;\r\n    // tmp[0] = words.length;\r\n    var blob = new Blob(tmp);\r\n    eleLink.href = URL.createObjectURL(blob);\r\n    // 触发点击\r\n    document.body.appendChild(eleLink);\r\n    eleLink.click();\r\n    // 然后移除\r\n    document.body.removeChild(eleLink);\r\n    }\r\n\r\n    render() {\r\n        var {values, years} = this.state;\r\n        var words = Object.keys(values);\r\n        var newvalues ={};\r\n        var newyears = [];\r\n        var startIndex = this.state.curveoptions[0]-1801;\r\n        var endIndex = this.state.curveoptions[1]-2008+2008-1801;\r\n        var step = this.state.curveoptions[2];\r\n        let i = 0;\r\n        for(i;i<words.length;i++){\r\n            var newdata = [];\r\n            let j = 0;\r\n            for(j=startIndex;j<=endIndex;j+=step){\r\n                newdata[(j-startIndex)/step] = values[words[i]][j];\r\n            }\r\n            newvalues[words[i]] = newdata;\r\n        }\r\n        let j =0;\r\n        for(j = startIndex;j<=endIndex;j+=step){\r\n            newyears[(j-startIndex)/step] = years[j];\r\n        }\r\n        if(words.length !==0){\r\n            values = newvalues;\r\n            years = newyears;\r\n            // console.log(newyears);\r\n        }\r\n\r\n        return (\r\n            <div >\r\n                <Logo></Logo>\r\n                <WordSelectBar updateCurve={this.updateCurve.bind(this)}/>\r\n                <SearchButton updateOption={this.updateOption.bind(this)} handleClick={this.handleClick.bind(this)}> </SearchButton>\r\n                <WordCurve values={values} years={years}/>\r\n                    {/* <div className=\"download\" style={{height: \"40dp\", width: '20%', float: \"right\", display:\"inline-block\"}}>\r\n                        {this.renderDownload()}\r\n                        <div style={{marginTop:\"100%\"}}>\r\n                        <p>This is words' semantic change tool of NGNLab \r\n                        </p>\r\n                        <a href=\"http://ngnlab.cn/\" >\r\n                            Know more about us \r\n                        </a>\r\n                        </div>\r\n                    </div> \r\n                </div>                         */}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Main} from \"./main\";\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Main/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}